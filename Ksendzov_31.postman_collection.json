{
	"info": {
		"_postman_id": "62f1a7c1-fc4d-4d6b-a2c1-d8769412186e",
		"name": "Ksendzov_31",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16734547"
	},
	"item": [
		{
			"name": "get_method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/get_method?name=Ihar&age=37",
					"host": [
						"{{URL}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Ihar"
						},
						{
							"key": "age",
							"value": "37"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/object_info_1?name=Ihar&age=37&weight=78",
					"host": [
						"{{URL}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Ihar"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "weight",
							"value": "78"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/object_info_2?name=Ihar&age=37&salary=1500",
					"host": [
						"{{URL}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Ihar"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3_test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let body = pm.response.json()\r",
							"\r",
							"// Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(body.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(body.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(body.salary).to.eql(+(req.salary));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(body.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check dog params\", function () {\r",
							"    pm.expect(body.family.pets.dog).have.property('name' && 'age');\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog name\", function () {\r",
							"    pm.expect(body.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog age\", function () {\r",
							"    pm.expect(body.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/object_info_3?name=Ihar&age=37&salary=1500",
					"host": [
						"{{URL}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ihar"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4_test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let body = pm.response.json()\r",
							"\r",
							"// Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(body.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(body.age).to.eql(+(req.age));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(\"Request salary is \" + req.salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(\"Response salary is \" + body.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"First value of salary from Response is \" + body.salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Second value of salary from Response is \" + body.salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Third value of salary from Response is \" + body.salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary from response first\", function () {\r",
							"    pm.expect(body.salary[0]).to.eql(+(req.salary));\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary from response second\", function () {\r",
							"    pm.expect(+(body.salary[1])).to.eql(+(req.salary*2));\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary from response third\", function () {\r",
							"    pm.expect(+(body.salary[2])).to.eql(+(req.salary*3));\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"pm.environment.set('name', req.name)\r",
							"\r",
							"// Создать в окружении переменную age\r",
							"pm.environment.set('age', req.age)\r",
							"\r",
							"// Создать в окружении переменную salary\r",
							"pm.environment.set('salary', req.salary)\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < body.salary.length; i++) {\r",
							"    console.log(body.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/object_info_4?name=Ihar&age=37&salary=1500",
					"host": [
						"{{URL}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ihar"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3_test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var body = pm.response.json()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Eql names manual\", function () {\r",
							"    pm.expect(body.name).to.eql('Ihar');\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Eql age manual\", function () {\r",
							"    pm.expect(body.age).to.eql('37');\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Eql salaries manual\", function () {\r",
							"    pm.expect(body.salary).to.eql(+'1500');   // to number req.salary\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"var req = request.data\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Eql names\", function () {\r",
							"    pm.expect(body.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Eql age\", function () {\r",
							"    pm.expect(body.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Eql salaries\", function () {\r",
							"    pm.expect(body.salary).to.eql(+req.salary);   // to number req.salary\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(body.family)\r",
							"\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check u_salary\", function () {\r",
							"    pm.expect(body.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ihar",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/user_info_3",
					"host": [
						"{{URL}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2_test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let body = pm.response.json()\r",
							"\r",
							"// Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary, qa_salary_after_6_months, qa_salary_after_12_months, qa_salary_after_1.5_year, qa_salary_after_3.5_years, person\r",
							"pm.test(\"Check params\", function () {\r",
							"    pm.expect(body).have.property('start_qa_salary' && 'qa_salary_after_6_months' && 'qa_salary_after_12_months' && 'qa_salary_after_1.5_year' && 'qa_salary_after_3.5_years' && 'person');\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start salary\", function () {\r",
							"    pm.expect(body.start_qa_salary).to.eql(+(req.salary));\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check 6 months salary\", function () {\r",
							"    pm.expect(body.qa_salary_after_6_months).to.eql(+(req.salary*2));\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check 12 months salary\", function () {\r",
							"    pm.expect(body.qa_salary_after_12_months).to.eql(+(req.salary*2.7));\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check 1.5 years salary\", function () {\r",
							"    pm.expect(body[\"qa_salary_after_1.5_year\"]).to.eql(+(req.salary*3.3));\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check 3.5 years salary\", function () {\r",
							"    pm.expect(body[\"qa_salary_after_3.5_years\"]).to.eql(+(req.salary*3.8));\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check person salary\", function () {\r",
							"    pm.expect(body.person.u_name[1]).to.eql(+(req.salary));\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check person age\", function () {\r",
							"    pm.expect(body.person.u_age).to.eql(+(req.age));\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check person salary 5 years\", function () {\r",
							"    pm.expect(body.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let key in body.person) {\r",
							"    console.log('Param is ' + [key] + ' Value is ' + body.person[key]);\r",
							"}\r",
							"\r",
							"for (i=0; i<body.person.u_name.length; i++) {\r",
							"    console.log('u-name value ' + (i+1) + ' is ' + body.person.u_name[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/user_info_2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "first_test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/first",
					"host": [
						"{{URL}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		}
	]
}